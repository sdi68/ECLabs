<?xml version="1.0" encoding="UTF-8"?>
<project name="ECLabs library" default="Build project production" basedir=".">
    <tstamp>
        <format property="build.date" pattern="%Y-%m-%d"/>
    </tstamp>

    <taskdef name="randomString" classname="vendor.platinumpixs.phing-random-string.src.PlatinumPixs.RandomString.GenerateTask" />

    <!--Каталог сборок, входящих в пакет-->
    <property name="packages" value="packages"/>
    <!-- Папка временных файлов -->
    <property name = "tmp_dir" value="tmp"/>
    <!--Папка для источников с замененными токенами-->
    <property name = "compile_dir" value="compiled"/>
    <!-- Флаг, что собирается не пакет -->
    <property name="is_package" value="0"/>
    <!--Версия пакета-->
    <property name="pkg_version" value="2.0.0"/>
    <!-- корневая директория проекта -->
    <property name = "root_dir" value = "src/current/" />
    <!-- уникальный суффикс для классов -->
    <randomString name="unique_suffix" length="8" stringType="lowercase_numeric" />

    <target name ="Build project development" description="Сформировать сборку пакета для разработки">
        <!--Тип сборки пакета development|production-->
        <property name = "build_type" value = "development" />
        <!--Каталог с релизами-->
        <property name="releases" value="dev"/>
        <!--Папка сборки пакета текущей версии-->
        <property name = "release_dir" value = "${releases}/${packages}/" />
        <!--Удаляем предыдущие сборки-->
        <echo msg="Deleting old ${build_type} build."/>
        <!--Удаляем предыдущие сборки-->
        <echo msg="Deleting old ${build_type} build."/>
        <delete quiet="false">
            <fileset dir="${releases}">
                <include name="*.zip"/>
            </fileset>
            <fileset dir="${release_dir}">
                <include name="*.zip"/>
            </fileset>
        </delete>

        <phingcall target="_build_source_package" >
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "lib_" />
            <property name = "version" value = "2.0.0-dev" />

            <property name = "source_dir" value = "${root_dir}libraries/${source}" />
        </phingcall>

        <phingcall target="_build_source_package" >
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "plg_" />
            <property name = "version" value = "2.0.0-dev" />
            <property name = "component_dir" value = "${root_dir}plugins/system/" />
            <property name = "source_dir" value = "${root_dir}plugins/system/${source}" />
        </phingcall>

        <!-- Собираем пакет -->
        <phingcall target="_build_source_package" >
            <!-- Флаг, что собирается пакет -->
            <property name = "is_package" value = "true" />
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "pkg_" />
            <property name = "version" value = "2.0.0-dev" />
            <property name = "source_dir" value = "${root_dir}package/" />
            <property name = "release_dir" value = "${releases}/" />
        </phingcall>

    </target>

    <target name ="Build project production" description="Сформировать продуктивную сборку пакета">
        <!--Тип сборки пакета development|production-->
        <property name = "build_type" value = "production" />
        <!--Каталог с релизами-->
        <property name="releases" value="releases/${pkg_version}/"/>
        <!--Папка сборки пакета текущей версии-->
        <property name = "release_dir" value = "${releases}/${packages}/" />
        <!--Удаляем предыдущие сборки-->
        <echo msg="Deleting old ${build_type} build."/>
        <!--Удаляем предыдущие сборки-->
        <echo msg="Deleting old ${build_type} build."/>
        <delete quiet="false">
            <fileset dir="${releases}">
                <include name="*.zip"/>
            </fileset>
            <fileset dir="${release_dir}">
                <include name="*.zip"/>
            </fileset>
        </delete>

        <phingcall target="_build_source_package" >
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "lib_" />
            <property name = "version" value = "2.0.0" />

            <property name = "source_dir" value = "${root_dir}libraries/${source}" />
        </phingcall>

        <phingcall target="_build_source_package" >
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "plg_" />
            <property name = "version" value = "2.0.0" />
            <property name = "component_dir" value = "${root_dir}plugins/system/" />
            <property name = "source_dir" value = "${root_dir}plugins/system/${source}" />
        </phingcall>

        <!-- Собираем пакет -->
        <phingcall target="_build_source_package" >
            <!-- Флаг, что собирается пакет -->
            <property name = "is_package" value = "true" />
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "pkg_" />
            <property name = "version" value = "2.0.0" />
            <property name = "source_dir" value = "${root_dir}package/" />
            <property name = "release_dir" value = "${releases}/" />
        </phingcall>

    </target>


    <target name="_replace_tokens" description="Заменить токен на значение">
        <!--Создать временную директорию-->
        <echo msg="Creating temporary folder: ...{tmp_dir}/${compile_dir}."/>
        <mkdir dir="${tmp_dir}/${compile_dir}" />
        <echo msg="Copying from ${source_dir} to {tmp_dir}/${compile_dir}"/>
        <echo msg="Replacement token: ${token1} to ${token1_value}"/>
        <echo msg="Replacement token: ${token2} to ${token2_value}"/>
        <copy todir="${tmp_dir}/${compile_dir}">
            <fileset dir="${source_dir}">
                <include name="**"/>
            </fileset>
            <filterchain>
                <replacetokens begintoken="__" endtoken="__">
                    <token key="${token1}" value="${token1_value}"/>
                    <token key="${token2}" value="${token2_value}"/>
                </replacetokens>
            </filterchain>
        </copy>

    </target>

    <target name="_clear_temporary_folder" description="Очистить временную папку">
        <!--Удалить временную директорию-->
        <echo msg="Deleting temporary folder: ... ${tmp_dir}/${compile_dir}."/>
        <delete dir="${tmp_dir}/${compile_dir}" />
    </target>

    <target name ="_build_source_package" description="Сформировать архив и переместить его в папку пакетов">

        <echo msg="Making the ${build_type} ${source} package."/>

        <if>
            <equals arg1="${build_type}" arg2="production"/>
            <then>
                <echo msg="Replace production tokens."/>
                <phingcall target="_replace_tokens">
                    <property name = "token1" value="DEPLOYMENT_VERSION"/>
                    <property name = "token1_value" value="${version}"/>
                    <property name = "token2" value="UNIQUE_SUFFIX"/>
                    <property name = "token2_value" value="${unique_suffix}"/>
                </phingcall>
            </then>
            <else>
                <echo msg="Replace deployment tokens."/>
                <phingcall target="_replace_tokens">
                    <property name = "token1" value="DEPLOYMENT_VERSION"/>
                    <property name = "token1_value" value="__DEPLOYMENT_VERSION__"/>
                    <property name = "token2" value="UNIQUE_SUFFIX"/>
                    <property name = "token2_value" value="${unique_suffix}"/>
                </phingcall>
            </else>
        </if>

        <if>
            <equals arg1="${is_package}" arg2="1" />
            <then>
                <!-- Собирается пакет, поэтому надо включить все компоненты из releases -->
                <echo msg="Add ${source} ${source} includes zip."/>
                <zip destfile="${release_dir}${prefix}${source}.zip">
                    <fileset dir="${tmp_dir}/${compile_dir}">
                        <include name="**"/>
                    </fileset>
                    <fileset dir="${release_dir}">
                        <include name="packages/**"/>
                    </fileset>
                </zip>
            </then>
            <else>
                <!-- Собирается компонент пакета -->
                <zip destfile="${release_dir}${prefix}${source}.zip">
                    <fileset dir="${tmp_dir}/${compile_dir}">
                        <include name="**"/>
                    </fileset>
                </zip>
            </else>
        </if>
        <phingcall target="_clear_temporary_folder"/>
    </target>

</project>