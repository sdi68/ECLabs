<?xml version="1.0" encoding="UTF-8"?>
<project name="ECLabs library" default="Build project production" basedir=".">
    <tstamp>
        <format property="build.date" pattern="%Y-%m-%d"/>
    </tstamp>

    <property name="ftp.host" value="dsanae.beget.tech"/>
    <property name="ftp.port" value="21"/>
    <property name="ftp.username" value="dsanae_sdi68"/>
    <property name="ftp.password" value="ptncb*6F"/>
    <property name="ftp.mode" value="binary"/>
    <property name="ftp.common_dir" value="/econsultlab.ru/public_html/uploads/joomla/packages/eclabs/"/>
    <!--Каталог сборок, входящих в пакет-->
    <property name="packages" value="packages"/>
    <!--Версия пакета-->
    <property name="pkg_version" value="1_0_5"/>
    <!--Префикс файла манифеста по-умолчанию-->
    <property name = "manifest_prefix" value = "update_" />
    <!--Очищаем директорию на FTP перед копирование сборки и манифеста-->
    <property name = "ftp.clearFirst" value = "false" />
    <!-- Флаг что не пакет -->
    <property name="is_package" value="0"/>
    <!--Расширение для временного файла, в котором сохраняется исходный до замены токена-->
    <property name = "tmp_extension" value = "sdiold" />

    <target name ="Build project production" description="Сформировать продуктивную сборку пакета">
        <!--Тип сборки пакета development|production-->
        <property name = "build_type" value = "production" />
        <!--Каталог с релизами-->
        <property name="releases" value="releases/${pkg_version}/"/>
        <!--Папка сборки пакета текущей версии-->
        <property name = "release_dir" value = "${releases}/${packages}/" />
        <!--Удаляем предыдущие сборки-->
        <echo msg="Deleting old ${build_type} build."/>
        <!--Удаляем предыдущие сборки-->
        <echo msg="Deleting old ${build_type} build."/>
        <delete quiet="false">
            <fileset dir="${releases}">
                <include name="*.zip"/>
            </fileset>
            <fileset dir="${release_dir}">
                <include name="*.zip"/>
            </fileset>
        </delete>

        <phingcall target="_build_source_package" >
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "lib_" />
            <property name = "version" value = "1_0_11" />
            <property name = "source_dir" value = "src/current/libraries/${source}" />
            <property name = "ftp_dir" value = "${ftp.common_dir}/libraries/${source}/" />
            <property name = "manifest_dir" value = "${source_dir}/" />
            <!--Производим замену токена-->
            <property name = "_file" value = "${source_dir}/classes/ECLExtension.php" />
            <property name = "_token" value = "@UPDATE_SERVER_URL@" />
            <property name = "_value" value = "https://econsultlab.ru" />
        </phingcall>

        <phingcall target="_build_source_package" >
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "plg_" />
            <property name = "version" value = "1_0_4" />
            <property name = "source_dir" value = "src/current/plugins/system/${source}" />
            <property name = "ftp_dir" value = "${ftp.common_dir}plugins/system/${source}/" />
            <property name = "manifest_dir" value = "${source_dir}/" />
        </phingcall>

        <!-- Собираем пакет -->
        <phingcall target="_build_source_package" >
            <!-- Флаг, что собирается пакет -->
            <property name = "is_package" value = "true" />
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "pkg_" />
            <property name = "version" value = "1_0_5" />
            <!-- <property name = "source_dir" value = "${releases}" /> -->
            <property name = "source_dir" value = "src/current/package/" />
            <property name = "ftp_dir" value = "${ftp.common_dir}" />
            <property name = "manifest_dir" value = "${source_dir}/" />
            <property name = "release_dir" value = "${releases}/" />
            <property name = "ftp.clearFirst" value = "false" />
        </phingcall>

        <!-- Загружаем инструкции -->
        <phingcall target="_upload_instruction" >
            <property name = "source_dir" value = "${releases}/doc/" />
            <property name = "ftp_dir" value = "${ftp.common_dir}doc/" />
        </phingcall>
    </target>


    <target name ="Build project development" description="Сформировать сборку пакета для разработки">
        <!--Тип сборки пакета development|production-->
        <property name = "build_type" value = "development" />
        <!--Каталог с релизами-->
        <property name="releases" value="dev"/>
        <!--Папка сборки пакета текущей версии-->
        <property name = "release_dir" value = "${releases}/${packages}/" />

        <!--Удаляем предыдущие сборки-->
        <echo msg="Deleting old ${build_type} build."/>
        <delete quiet="false">
            <fileset dir="${releases}">
                <include name="*.zip"/>
            </fileset>
            <fileset dir="${release_dir}">
                <include name="*.zip"/>
            </fileset>
        </delete>

        <phingcall target="_build_source_package" >
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "lib_" />
            <property name = "version" value = "1_0_11" />
            <property name = "source_dir" value = "src/current/libraries/${source}" />
            <property name = "ftp_dir" value = "${ftp.common_dir}/" />
            <property name = "manifest_dir" value = "${source_dir}/" />
            <!--Производим замену токена-->
            <property name = "_file" value = "${source_dir}/classes/ECLExtension.php" />
            <property name = "_token" value = "@UPDATE_SERVER_URL@" />
            <property name = "_value" value = "https://dev.econsultlab.ru" />

        </phingcall>

        <phingcall target="_build_source_package" >
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "plg_" />
            <property name = "version" value = "1_0_4" />
            <property name = "source_dir" value = "src/current/plugins/system/${source}" />
            <property name = "ftp_dir" value = "${ftp.common_dir}plugins/system/${source}/" />
            <property name = "manifest_dir" value = "${source_dir}/" />
        </phingcall>

        <!-- Собираем пакет -->
        <phingcall target="_build_source_package" >
            <!-- Флаг, что собирается пакет -->
            <property name = "is_package" value = "true" />
            <property name = "source" value = "eclabs" />
            <property name = "prefix" value = "pkg_" />
            <property name = "version" value = "1_0_5" />
            <!-- <property name = "source_dir" value = "${releases}" /> -->
            <property name = "source_dir" value = "src/current/package/" />
            <property name = "ftp_dir" value = "${ftp.common_dir}" />
            <property name = "manifest_dir" value = "${source_dir}/" />
            <property name = "release_dir" value = "${releases}/" />
            <property name = "ftp.clearFirst" value = "false" />
        </phingcall>

    </target>
    <!-- Сборка и отправка по FTP -->
    <target name ="_build_source_package" description="Сформировать архив и переместить его в папку пакетов">

        <echo msg="Making the ${build_type} ${source} package."/>
        <!--Если необходимо производим замену токена-->
        <if>
        <isset property = "_file" />
        <then>
        <phingcall target="_replace_token" >
            <!--Путь к файлу с токеном-->
            <property name = "file" value = "${_file}" />
            <!--Токен для замены-->
            <property name = "token" value = "${_token}" />
            <!--Значение для замены токена-->
            <property name = "value" value = "${_value}" />
            <!--Расширение временного файла для сохранения исходного-->
            <property name = "tmp_file_extension" value = "${tmp_extension}" />
        </phingcall>
        </then>
        </if>
        <if>
            <equals arg1="${is_package}" arg2="1" />
            <then>
                <!-- Собирается пакет, поэтому надо включить все компоненты из releases -->
                <echo msg="Add ${source} ${source} includes zip."/>
                <zip destfile="${release_dir}${prefix}${source}.zip">
                    <fileset dir="${source_dir}">
                        <include name="**"/>
                        <exclude name="${manifest_prefix}${source}.xml"/>
                        <!-- пропускаем временный файл -->
                        <exclude name="**.${tmp_extension}"/>
                    </fileset>
                    <fileset dir="${release_dir}">
                        <include name="packages/**"/>
                        <exclude name="${manifest_prefix}${source}.xml"/>
                    </fileset>
                </zip>
            </then>
            <else>
                <!-- Собирается компонент пакета -->
                <zip destfile="${release_dir}${prefix}${source}.zip">
                    <fileset dir="${source_dir}">
                        <include name="**"/>
                        <exclude name="${manifest_prefix}${source}.xml"/>
                        <!-- пропускаем временный файл -->
                        <exclude name="**.${tmp_extension}"/>
                    </fileset>
                </zip>
            </else>
        </if>

        <if>
            <equals arg1="${build_type}" arg2="development" />
            <then>
                <echo msg="Skip FTP deploy ${source} package."/>
            </then>
        <else>
        <echo msg="FTP deploy ${source} package."/>
        <ftpdeploy
                host="${ftp.host}"
                port="${ftp.port}"
                username="${ftp.username}"
                password="${ftp.password}"
                dir="${ftp_dir}"
                ssl="false"
                passive="false"
                level='error'
                clearFirst="${ftp.clearFirst}"
                dirmode="inherit"
                mode="${ftp.mode}">
            <fileset dir="${release_dir}">
                <include name="${prefix}${source}.zip"/>
            </fileset>
            <fileset dir="${manifest_dir}">
                <include name="${manifest_prefix}${source}.xml"/>
                <!-- пропускаем временный файл -->
                <exclude name="**.${tmp_extension}"/>
            </fileset>
        </ftpdeploy>
        </else>
        </if>
        <!--Если была замена токена, восстанавливаем исходный файл-->
        <if>
        <isset property = "_file" />
        <then>
        <phingcall target="_restore_file" >
            <!--Путь к файлу с токеном-->
            <property name = "file" value = "${_file}" />
            <!--Расширение временного файла для сохранения исходного-->
            <property name = "tmp_file_extension" value = "${tmp_extension}" />
        </phingcall>
        </then>
        </if>
    </target>

    <target name ="_upload_instruction" description="Отправить по FTP инструкцию">
        <if>
            <equals arg1="${build_type}" arg2="development" />
            <then>
                <echo msg="Skip FTP deploy instruction files."/>
            </then>
            <else>
                <echo msg="FTP deploy instruction files."/>
                <property name = "doc_dir" value = "${releases}/doc/" />
                <ftpdeploy
                        host="${ftp.host}"
                        port="${ftp.port}"
                        username="${ftp.username}"
                        password="${ftp.password}"
                        dir="${ftp_dir}"
                        ssl="false"
                        passive="false"
                        level='error'
                        clearFirst="${ftp.clearFirst}"
                        dirmode="inherit"
                        mode="${ftp.mode}">
                    <fileset dir="${doc_dir}">
                        <include name="*.pdf"/>
                    </fileset>
                </ftpdeploy>
            </else>
        </if>
    </target>

    <!-- Ищет в указанном файле токен и заменяет его на указанное значение -->
    <target name="_replace_token">
        <!-- Копирует исходный файл во временный-->
        <copy file="${file}" tofile="${file}.${tmp_file_extension}"
              overwrite="true"/>
        <echo msg=" Ищем токен ${token} в файле ${file} и меняем его на  ${value}"/>
        <!--Ищем и заменяем токен-->
        <reflexive file = "${file}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${token}" replace="${value}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!--Восстанавливает исходный файл до замены токена из временного. Удаляет временный файл-->
    <target name="_restore_file">
        <!--Восстанавливает файл-->
        <copy file="${file}.${tmp_file_extension}" tofile="${file}" overwrite="true"/>
        <!--Удаляет временный файл-->
        <delete quiet="false" file = "${file}.${tmp_file_extension}" />
    </target>
</project>